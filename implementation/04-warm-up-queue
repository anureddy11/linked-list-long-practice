
class SinglyLinkedNode {
    constructor(val) {
        this.value = val;
        this.next = null;
    }
}


class Queue {

    constructor() {
        this.head = null;
        this.tail = null;
        this.length = 0;
    }

    enqueue(val) {
        // Add node to end of queue (linked list)

        // Your code here
        const newNode = new SinglyLinkedNode(val); // Create a new node with the given value

        if (this.length===0) {
            this.head = newNode;
            this.tail = newNode
        } else {
            this.tail.next=newNode
            this.tail=newNode
        }

        this.length += 1; // Increment the length of the list
        return this.length



        // Write your hypothesis on the time complexity of this method here
    }

    dequeue() {
        // Remove node from front of queue (linked list)

        // Your code here
        let removedNode = this.head
        if (!this.head){
            return null
        }
        else if(this.length===1){
            this.head = null
            this.tail = null
        }
        else{

            this.head = this.head.next
        }

        this.length--
        return removedNode


        // Write your hypothesis on the time complexity of this method here
    }

    print() {
        // Print out the linked list

        // Your code here
        if(!this.head){
            return undefined
        }
        else{
            let temp = this.head
            while(temp){
                console.log(temp.value)
                temp=temp.next
            }
        }


    }
    find(n){
         if(!this.head){
            return
        }
        else{
            let temp = this.head
            while(temp){
                if(temp.value===n){
                    return temp
                }
                temp=temp.next
            }


        }

    }
    


}

let warmQueue = new Queue

warmQueue.enqueue(2)
warmQueue.enqueue(3)
warmQueue.enqueue(10)
warmQueue.enqueue(4)

// warmQueue.print()
console.log(warmQueue.find(4))
